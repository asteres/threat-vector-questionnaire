ID	Name	Description	CAWE_ID	STRIDE Type(s)
1	Insufficiently Protected or Transmitted Credentials	An attacker could gain access to user accounts and access sensitive data used by the user accounts if the users credentials are insufficiently protected or transmitted without encryption.	522	Elevation of Privilege
2	Bypass through Modified Client	An attacker can use a modified client to gain access by bypassing the server's authentication check, thus gaining access	602, 603	Elevation of Privilege
3	Input Validation Bypass	Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash. 	602	Denial of Service, Elevation of Privilege
4	Information Disclosure	If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program).	647	Information Disclosure, Elevation of Privilege
5	Malformed URL Attack	An attacker can use different URL formatting or encodings to bypass a system's authorization decision, thus gaining access	551, 647	Elevation of Privilege
6	Alternate Name Attack	The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor. An attacker can use different name to bypass authentication 	289	Elevation of Privilege
7	Improper Implementation of Authentication Algorithm	An attacker may be able to use reflection attacks or brute force to bypass authentication in a system with an incorrect implementation of authentication algorithm	303	Elevation of Privilege
8	Security through Obscurity	An attacker can reverse engineer an algorithm that relies on obscurity	656	Tampering with data, Information Disclosure, Denial of Service
10	Credentials Spoofing	An attacker can sniff networks to obtain messages sent to a server for authentication, and resend them to bypass authentication and gain access to sensitive data	294	Spoofing Identity
11	Authentication Protocol Reflection Attacks	An attacker can abuse an authentication protocol by sending it the same key that it receives, allowing for a reflection attack to bypass authentication	301	Spoofing Identity
12	IP Spoofing	An attacker can spoof or encode an IP address to bypass a system using IP addresses for authentication, granting access to sensitive data	291	Spoofing Identity
13	Acceptance of Masked Data	An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.	349	Tampering with data, Elevation of Privilege
14	Reliance on Untrusted Inputs in a Security Decision	The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.	807	Information Disclosure, Denial of Service, Elevation of Privilege
15	Exploitation of Assumed-Immutable Data	An attacker can modify assumed-immutable data to bypass authentication, such as cookies or environment variables, thus gaining access to sensitive data	302	Elevation of Privilege
16	Modification of Control Spheres through Data Files	An attacker can modify the data files to gain privileges not intended, thus gaining access	673	Elevation of Privilege
17	XPath Injection	An attacker can modify XPath expressions using improperly neutralized inputs. This can allow an attacker to bypass security checks, access unauthorized data, control the application flow, or modify application logic.	643	Information Disclosure, Elevation of Privilege
18	Alternate Path or Channel Exploit	An attacker can abuse an alternate path of a system that has poor or no authentication to bypass the system's authentication and gain access to sensitive data	288	Elevation of Privilege
19	Insufficient Proof of Identity	When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.	287	Spoofing Identity
20	Pass the Hash	If an attacker can obtain the password hash for a user, they can bypass authentication without ever knowing the user's password, thus gaining access	836	Elevation of Privilege
21	Exploitation of Modifiable User Key	An authenticated user (attacker) can retrieve another user's record in the system based on some key value that is under user control. 	639	Elevation of Privilege
23	Impersonation by Referer Field	An attacker can modify the referer field in HTML requests to bypass authentication in a system that relies on the referer field for authentication, granting access to sensitive data	293	Spoofing Identity
24	Exploitation through Hard-Coded Cryptographic Key	If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.	321	Elevation of Privilege
25	Exploitation Through Expired Key	The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.	324	Elevation of Privilege
26	Poor Password Requirements	An attacker can easily abuse weak password requirements by using scripts to perform brute force attacks, thus gaining access	521	Elevation of Privilege
27	Exploitation through Hard-Coded Credentials	Use of hard-coded credentials allows for attackers to easily gain unauthorized access to sensitive data	259, 798	Elevation of Privilege, Information Disclosure, Spoofing Identity
28	Use of Empty Password	The application is exposed to even the most basic of attacks with an empty password, any brute force script will break in. As a result it is possible for an attacker to gain access to sensitive data.	258	Elevation of Privilege
29	Exploitation through Weak Recovery Mechanism	An attacker may take advantage of weak recovery mechanisms to undermine an otherwise strong password scheme, to bypass authentication and gain access	640	Spoofing Identity
30	Exploitation through Password Change	If an attacker can change a user's password without needing verification, they can gain access	620	Spoofing Identity
32	Improper Expiration of Password	As passwords age, the probability that they are compromised by an attacker grows.	262, 263	Spoofing Identity
33	Unrestricted Authentication Attempts	An attacker can implement scripts to brute force passwords if no restriction of login attempts are implemented, thus gaining access	307	Elevation of Privilege
34	Lack of Multi-Factor Authentication	A system is far more susceptible to attacks by malicious users if there is only one method of authentication 	308	Elevation of Privilege
35	Exploitation of Weakened Authentication Technique	The software utilizes a authentication technique that does not follow the predefined algorithm exactly. Malicious users can use this weakness to achieve many different goals such as bypassing protection methods, reading application data, or hiding malicious actions from logs.  	304, 325	
36	Exploitation of Predictable PRNG Available	An attacker can take advantage of algorithms that use insufficient entropy, allowing for a multitude of attacks to be performed. Some attacks available include authentication bypass, or denial of service.	331, 332, 333	
37	Brute Force due to Small PRNG Value Space	An attacker can exploit the use of a pseudo-random number generator to perform brute-force attacks because the generator produces a small set of random values.	334	
38	Exploitation of Incorrectly Managed PRNG Seeds	An attacker can exploit the use of a pseudo-random number generator when the seed for the algorithm is incorrectly managed. For instance, the attacker could perform authentication bypass when a pseudo-random number generator uses a predictable seed to generate session ids.	335	
39	Exploitation through PRNG in Security Context	An attacker can exploit the use of a pseudo-random number generator when the algorithm is used in a security context is not cryptographically strong. For example, this can lead to authentication bypass by brute forcing random values.	338	
40	Unintended Malicious Behavior due to Lack of or Improper Restriction of Resources to Unauthorized Actor	The software is susceptible to a number of attacks because the application fails to properly authenticate, authorize and track a user. Attacks vary based on the context of weakness but more commonly lead to bypass of security checks, data breaches and spoofing.	284	
41	Unintended Malicious Behavior due to Improper Authentication	The application does not properly authenticate a user leading to several different vulnerabilities. Attacks vary based on context of the weakness 	287	
42	Unintended Malicious Behavior due to Exposed Critical Functionality	Critical functions are exposed to the user without the need for authentication. This can lead to elevation of privilege attacks.	306	
43	Privilege Elevation due to Lack of or Incorrect Restriction of Resources to Unintended Actor	An attacker can elevate privileges because the software incorrectly assigns privileges to an actor, creating an unintended sphere of control.	266	
44	Spoofing due to Improper Verification of Intended Endpoint	The software improperly verifies the actor that it communicates with. Improperly verifying a key exchange or certificate, to name a few weaknesses, can lead to attacks with the goal of spoofing an authenticated user.	297, 300, 322, 940	
45	Unintended Malicious Behavior due to Trusted Domains that Should Not Be Trusted	The software trusts domains that should be blacklisted. Based on the context of the weakness, an attacker could execute unauthorized commands, access application data or bypass authentication.	942	
46	Unintended Malicious Behavior due to Incorrect User Management	An attacker can perform several of different attacks due to the application improperly managing a user. Attacks and attacker goals can vary with context.	286	
47	Breach of Control Sphere due to Improper Management of Object or Resource Ownership	An attacker can elevate privileges or spoof a user, because the application does not correctly verify a resource is owned by the right entity or incorrectly assigns a resource to an actor.	282, 283, 708	
48	Unintended Malicious Behavior due to Incorrect or Improper User Privilege Management	The software fails to correctly drop the privileges of a resource before passing control to an actor with less privileges. Attackers can use the unintended privileges to hide malicious activity or assume identity of another actor.	271	
49	Elevation of Privileges or Spoofing due to Improper or Incorrect Privilege Lowering	The software fails to lower the privileges used to execute privileged commands. This allows an attacker to access application data, elevate privileges or spoof a user.	272	
50	Unintended Malicious Behavior due to Incorrect Handling of Insufficient Privileges	The system does not handle or incorrectly handles when an actor performs an operation without the correct permissions. Attacks vary based on the context of the weakness, but typically actors can use the resultant weakness to alter the execution logic of the application.	274, 280	
51	Spoofing due to Improper Privilege Management during Context Switching	An attacker could elevate privileges or spoof another user because the software does not properly switch contexts that have differing privileges.	270	
52	Elevation of Privileges due to Incorrect or Improper User Privilege Assignment	The software incorrectly assigns permissions, defines permissions with unsafe actions, or improperly combines permissions that allow an attacker to elevate their privileges.	266, 267, 268	
53	Unintended Malicious Behavior due to Operation performing at Higher Privilege Level than needed	The software executes an operation with privileges higher than it needs to perform that operation. This can lead to a malicious user accessing application data, elevating privileges, executing unauthorized commands, or performing a denial of service attack	250	
54	Data Breach or Privilege Elevation due to Lack of or Incorrect Authorization Check	The software does not assume or incorrectly assumes that a user has access to a resource. This allows an attacker to perform several different attacks to be able to read or modify application data or elevate privileges.	285	
55	Access to Sensitive Data due to Insufficient Access Control of  Web Document Root	The application stores data under the web document root. However, the web document does not have sufficient access control, allowing attackers to read the sensitive data stored there	219	
56	Authorization Bypass due to Improper or Missing Authorization checks	The software does not or incorrectly performs an authorization check, allowing an actor to bypass the check, and perform malicious actions. These actions vary based on context of the check. 	862	
57	Authorization Bypass due to Improper Restriction of Actors Invoking Custom URL Scheme	An attacker can bypass authorization by utilizing custom URL schemes that do not perform the correct authorization steps.	939	
58	Authorization Bypass due to Incorrect Authorization Checks	The software does not correctly perform an authorization check when an actor accesses a resource. This allows the actor to read and write to application data or file system directories, or elevate privileges.	863	
59	Access to Resources by Unintended Actors	An attacker can gain access to security-critical resources because the software specifies permissions that grant access to a wider range of actors than required. And attacker could read and modify data specific to the application, or elevate privileges	732	
60	Data Breach due to Improper Permission Assignment at Installation	A unintended actor can access or modify application data through an object with incorrect permissions.	276	
61	Data Breach due to Incorrect Permission Preservation	A breach of data can occur because the software does not preserve permissions correctly when copying, sharing or restoring objects.	281	
62	Data Breach due to Inheritance of Insecure Permissions	An actor can read or modify application data using insecure permissions that were set by the application and inherited by the actor.	277	
63	DoS Attack Using Account Lockout	An attacker can leverage a restrictive account lockout feature to implement a DoS attack to the legitimate users by causing their accounts to be locked out	645	
64	Information Exposure through Error Messages	An attacker can leverage server error message to gain information about the backend architecture and technology.	550, 210, 211	
65	Exposure of Data Element to Wrong Session	Users data can be breached from one session to another session	488	
66	Alter Execution logic	An attacker could cause the software to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.	841	
67	Attack through Unexpired Session	An attacker can reuse old session credentials or session IDs for authorization.	613	
68	Gain Privileges or Assume Identity Via Session Fixation	An attacker can steal authenticated sessions using session fixation attack	384	
69	Tampering with Data, Information Disclosure, and Denial of Service	An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.  An attacker could read confidential data if they are able to control resource references.  An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.	20	
70	Data Tampering	An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.	59	
71	Data Breach due to Incorrect Sanitization of Inputted Resource Identifiers	An attacker can specify the identifier (e.g. file path, port number) used to access a system resource (e.g. file).	73, 99, 641	
72	Data Breach due to Improper Transfer between Control Spheres 	An attacker might gain access to sensitive data unintendedly transfered from another sphere	212, 669	
73	Unauthorized Code Execution due to Processing Files with Dangerous Contents 	An attacker can execute arbitrary code by uploading a file that automatically processed	434	
74	Unauthorized Code Execution due to Code Execution without Integrity Check	An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.	494	
75	Unauthorized Code Execution due to Dependency on Executable Functionality Provided by External Source	An attacker might execute arbitrary code, modify user permissions, and access arbitrary files on the system. 	98, 827, 829	
76	Unintended Malicious Behavior due to Acceptance of Expired Certificates	An attacker can take advantage of an expired certificates to perform spoofing attacks that will compromise user data.	298	
77	Endpoint Spoofing due to Improper Message Integrity Checks	The system fails to check that a message from an endpoint has not been modified. This allows an attacker to spoof an endpoint to gain all of its associated privleges	924	
78	Data Breach due to Exposure of Resources to Wrong Control Sphere	An attacker can take advantage of misconfigured software mechanisms to access private resources that belong to other users.	668	
79	Leaked Application Data due to Insufficient Access Control of FTP Document Root	The system allows storing files under an FTP document root directory with improper access control. This allows attackers to gain access to data that is stored in the FTP document root.   	220	
80	Unintended Malicious Behavior due to Insufficient Compartementalization of Functionality or Processes	An attacker can take advantage of exploits in low privileged areas to gain access to high privileged areas in the system.	653	
81	Malicious Acts Hidden due to Omission of Security-relevant Information	An attacker can perform malicious attacks that are hidden from administrators because the actions are not logged	223, 778	
82	Unintended Malicious Behavior due to Improper Exception Handling	The system can be left in an unexpected state when an exception is thrown. This allows the attacker to perform various malicous actions dependent on the context of the exception	460	
83	Access to Application Data or File System Resources due to Storage of Sensitive Data without Limiting Actor Access	The application does not limit an actor from accessing application data or resources allowing the actor to perform various actions such as modifying such data or reading sensitive information	312, 921, 922	
84	Unintended Malicious Behavior due to Lack of or Improper checks for Infrequent Unusual or Exceptional Conditions	An attacker can exploit exceptional cases that do not occur on a daily basis to perform a wide variety of malicious actions. For example, if the application does not validate the checksum of messages received, the application would not know if those messages were modified in flight.	354, 754	
85	Unintended Malicious Behavior due to Lack of or Incorrect Check for Successful Privilege Drop	If the application fails to drop privileges and does not have a mechanism for checking for failure, a malicious actor may continue to use the application with elevated privileges or an assumed identity.	273	
86	Unintended Malicious Behavior due to Lack of or Incorrect Neutralization of Output to Logs	An attacker can modify log files by adding content that is not neutralized by the application. The content may add additional lines to the log file, hiding the attackers activity	117	
87	Unintended Malicious Behavior due to Use of Broken or Risky Cryptographical Algorithm	The application uses a broken algorithm, opening a path for the attacker to access the application. Depending on the use of the cryptographic algorithm, the attacker can perform several different actions, such as reading application data or hiding malicious activity.	327	
88	Autheniction Bypass due to Use of RSA without Optimal Asymmetric Encription Padding	The application uses RSA as an encryption algorithm, however it lacks the Optimal Asymmetric Encryption Padding. The algorithm is weaker without this padding, allowing a malicious actor to bypass the protection mechanism	780	
89	Authentication Bypass due to Password Hash with Low Level of Computational Effort	An actor may be able to bypass the protection afforded by a hasing algoritm due to a low level of computational effort.	759, 916	
90	Denial of Service or Hidden Malicious Actions due to Excessive Logging	The application logs too much information to a file. This can allow an attacker may be able to perform a Denial of Service attack by overloading a log file.	779	
91	Unintended Malicious Behavior due to Storage of Security-critical State Information in Globally Accessible Location	If an attacker is able to access critical information that they are not authorized to access, due to the programmer having this information in an insecure location, then they are able to modify this information without being detected.	642	
92	Spoofing due to Lack of Validation and Integrity Checking of Cookies In Security-Critical Operations	If an application relies on cookies for security related operations without validating the cookie or checking it's integrity, then an attacker can bypass authentication and conduct XSS and SQL injection style attacks.	565, 784	
93	Unintended Malicious Behavior due to Missing Error Codes	The availability of the application is compromised if the correct error reporting is missing from the application.	392	
94	Data Breach due to Exposure of Sensitve Information Through Logs	If logs containing sensitive information are not properly stored away from users, an attacker can use the information in the logs to more easily create an attack or access user information.	532	
95	Unintended Malicious Behaviour due to Improper Valiation of Input	Applications that do not properly validate inputs are prone to attackers through the use of methods such as XSS, SQL injection, arbitrary code execution, etc.	20	
96	Unintended Malicious Behaviour due to Acceptance of Unneutralized Special Elements	Applications that do not properly validate or neutralize special characters in the input stream are subject to attackers using injection to execute attacks such as SQL injection, format string vulnerabilities, etc.	74	
97	Command Injection due to Acceptance of Improperly Neutralized External Input	Applications that do not properly validate or neutralize special elements in the creation of commands are vulnerable to attackers using command injection attacks against their application.	77	
98	Uauthorized OS Command Execution due to Acceptance of Improperly Neutralized External Input	Applications that do not properly validate or neutralize special elements in the creation of OS commands are vulnerable to attackers using OS command injection attacks against their application.	78	
99	Unauthorized Command Execution due to Insufficient Delimination of Command Arguments	If an application does not properly delimit the arguments passed, then an attacker can include arguments that allows for unintended commands or code to be executed or access sensitive information.	88	
100	Cross-site Scripting Attack due to Acceptance of Improperly Neutralized External Input	An attacker can inject malicious code into a website that when parsed by client browsers performs, performs a malicious action. This can include stealing user information such as cookies, spoofing the client or the system, and installing additional malicious applications.	79	
101	Code Injection due to Acceptance of Improperly Neutralized External Input	The system does not delimit arguements being passed between components. This allows an attacker to include unintended arguements to a component, allowing for arbitrary code execution or other unintended behavior. 	94, 95, 96	
102	Unauthorized Code Execution due to use of Untrusted Source	The system loads libraries or executes commands from an untrusted source. This allows an attacker to change the command being executed, or the environment that the command runs in	114	
103	Denial of Service due to Unrestricted Resource Allocation	The application fails to impose limits on the allocation of reusable resources to an actor, allowing a malicious actor to preform resource consumption-based denial of service attacks	770	
104	Exposure of Sensitive Information due to Missing Encryption	An attacker can gain access to sensitive information during storage or transmission because the application does not encrypt that data.	311	
105	Unintended Malicious Behavior due to Improper Restriction of XML External References	The software processes XML documents that use URI's defining documents outside of the intended control sphere. This can lead to sensitive data being leaked to a malicious attacker, or a system crash if the file being loaded is too large to process.	611	
106	Unintended Malicious Behavior due to Untrusted Search Path	An attacker can supply the application a path to search for critical resources. If the attacker supplies a resource path not under the applications control, the system may return sensitive data, elevate the privileges of the attacker, or crash completely	426	
107	Unauthorized Code Execution due to Improperly Neutralized LDAP Query	The software fails to neutralize special elements in an LDAP query. This can allow an attacker to modify the query, gaining access to application data and possibly modifying.	90	
108	Session Hijacking due to Insufficient Session ID length (J2EE)	The software utilizes J2EE but sets an insufficient session ID length. A small session ID is easier to guess. If an attacker were to guess the session ID, they would be able to elevate their privileges	6	
109	Unauthorized Code Execution due to Improperly Neutralized XQuery Expressions	The software fails to neutralize special elements in an XQuery Expression. This can allow an attacker to modify the query, gaining access to application data.	652	
110	Information Exposure due to File Descriptor Leak 	An attacker can access application data, because a process fails to close sensitive file descriptors before invoking a child process. This allows the child process to run with the privileges of the parent process.	403	
111	Malicious Activity due to Improper Following of a Certificates Chain of Trust	The application does not follow the chaing of trust for a certificate correctly, allowing an attacker to spoof a certificate and elevate privileges or execute unautorized code.	296	
112	Authentication Bypass due to Missing OpenSSL validation	The attacker can bypass authentication mechanisms when using an openSSL certificate because the software does not implement the proper functions to ensure the certificate satisfies all security requirements.	599	
113	Leaked data due to a predictable observable state	An attacker can gain information about a system by discovering predicatable patterns about observable states. This can then be used by attackers to further exploit the system.	341	
114	Unintended behaviors due to insecure input/output control	The system does not restrict functionality of an input/output control. An attacker can gain access to this, which allows the attacker to execute any functionality the control provides.	782	
115	Unintended behavior due to external control of system settings	An attacker can gain access to system configuration settings and modify them to cause system disruption, unintended, and potentially malicious behaviors	15	
116	Leaked data due to inadequate encryption	The system does not protect sensitive data with a strong enough encryption algorithm. An attacker can gain access to sensitive data by brute forcing weak encryption alogrithms.	326	
117	Leaked data due to insecure backups	The system may backup files in a way that puts them outside the intended control sphere. An attacker can then have access to these files, which can contain sensitive information about the system.	530	
118	Leaked data through sent data	An attacker can gain sensitive information about a system by observing system data channels. This data can then be used to further exploit the system.	201	
119	Unintended behavior due to deserialization of untrusted data	The system deserializes untrusted data without verifying the resulting data will be valid. This can allow an attacker to perform a wide range of unintended behaviors by modifying serialized data that will later be deserialized and executed. 	502	
120	Leaked application data due to improperly stored passwords	The system stores passwords in a format that is recoverable. An attacker can gain access to user passwords that  can then be used to impersonate the user.	257	
121	Unintended behavior due to lack of integrity checks	The system fails to verify the integrity of data during transmission. This can result in an attacker sending modified or corrupt data to the system that can result in unintended functionality.	353	
122	Leaked application data due to lack of encryption	An attacker can gain access to sensitive data by sniffing unencrypted communication channels on a network. 	319	
123	Unintended behavior due to lack of proper error handling	An attacker can put the system into an unintended state by utilizing ignored error conditions. This can lead to unintended logic and behavior of the system	390	
124	Leaked application data due to error message	An attacker can gain sensitive information about a system by analyzing error messages. This data can then be used for a later attack.	209	
125	Unauthorized access due to improper link resolution	The system does not prevent a filename from identifying links or shortcuts to other locations. This can allow attackers to access unintended resources and filesystems. 	59	
126	Unintended behavior due to improper neutralization of special SQL elements	An attacker can use improperly neutralized special elements to modify intended SQL commands. This allows an attacker to perform unintended operations on SQL databases. 	89	
127	Unauthorized access due to improper verification of sources	An attacker can spoof a source and gain the full functionality intended for that source. 	346	